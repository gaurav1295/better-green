<style>
  header-drawer {
    justify-self: start;
    margin-left: -1.2rem;
  }

  {%- if section.settings.sticky_header_type == 'reduce-logo-size' -%}
    .scrolled-past-header .header__heading-logo-wrapper {
      width: 75%;
    }
  {%- endif -%}

  {%- if section.settings.menu_type_desktop != "drawer" -%}
    @media screen and (min-width: 990px) {
      header-drawer {
        display: none;
      }
    }
  {%- endif -%}

  .menu-drawer-container {
    display: flex;
  }

  .list-menu {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .list-menu--inline {
    display: inline-flex;
    flex-wrap: wrap;
  }

  summary.list-menu__item {
    padding-right: 2.7rem;
  }

  .list-menu__item {
    display: flex;
    align-items: center;
    line-height: calc(1 + 0.3 / var(--font-body-scale));
  }

  .list-menu__item--link {
    text-decoration: none;
    padding-bottom: 1rem;
    padding-top: 1rem;
    line-height: calc(1 + 0.8 / var(--font-body-scale));
  }

  /* .list-menu > li:first-child {
    border-right:  1px solid rgba(var(--color-menu-border), 1);
  }

  .list-menu > li:last-child {
    border-left: 1px solid rgba(var(--color-menu-border), 1);
  } */

  @media screen and (min-width: 750px) {
    .list-menu__item--link {
      padding-bottom: 0.5rem;
      padding-top: 0.5rem;
    }
  }
</style>

{%- style -%}
  .pre-header {
    padding: {{ section.settings.padding_top | times: 0.5 | round: 0 }}px 3rem {{ section.settings.padding_bottom | times: 0.5 | round: 0 }}px 3rem;
  }

  .section-pre-header {
    position: sticky; /* This is for fixing a Safari z-index issue. PR #2147 */
    margin-bottom: {{ section.settings.margin_bottom | times: 0.75 | round: 0 }}px;
  }

  .login-section {
    display: flex;
    align-items: center;
    gap: 14px;
  }

  @media screen and (min-width: 750px) {
    .section-pre-header {
      margin-bottom: {{ section.settings.margin_bottom }}px;
    }
  }

  @media screen and (min-width: 990px) {
    .pre-header {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  .date-desc {
    color: #f2f2f2;
    display: inline-block;
    padding-left: 13px;
    padding-right: 13px;
    padding-top: 7px;
    font-size: 13px;
    font-weight: lighter;
  }

  .date-dropdown-container {
    display: flex;
    align-items: center;
    margin-right: 30px;
  }

  @media only screen and (max-width: 768px) {
    .pre-header {
      display: none;
    }
  }

  @media (max-width: 768px) {
  .date-dropdown-container {
    display: none;
    }
  }

  .selected-date {
    font-weight: 500;
    font-size: 14px;
    margin-left: 5px;
    margin-right: 5px;
    cursor: pointer;
  }

  .selected {
    background-color: #392f2c!important;
    color: #f9f8f4!important;
  }

  .tooltiptext {
    visibility: hidden;
    width: 220px;
    position: absolute;
    background-color: white;
    color: black;
    /* padding: 5px; */
    border-radius: 6px;
    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);
    top: 85%;
    right: 7%;
    transform: translateX(-50%);
  }

  .tooltiptext:before {
    background: #fcfcfa;
    box-shadow: -2px -2px 2px 0 rgba(0, 0, 0, .1), -1px -1px 0 0 rgba(0, 0, 0, .2);
    content: " ";
    height: 10px;
    left: 48%;
    position: absolute;
    top: -5px;
    transform: rotate(45deg);
    width: 10px;
  }

  /* Increased specificity for improved styling control (optional) */
  #selectedDate .tooltiptext {
    /* Additional styles for the specific tooltip of this element */
  }

  .tooltiptext.show {
    visibility: visible; /* Make tooltip visible on click */
  }


  .delivery-container {
    padding: 24px;
    /* margin: 10px 0; Add some margin for better spacing */
  }

  .delivery-label {
    font-family: 'Rubik';
    font-weight: 400;
    font-size: 16px;
    /* font-weight: bold;
    margin-bottom: 5px; Add some space below the label */
  }

  .delivery-options {
    list-style: none; /* Remove default bullet points */
    padding: 0;
    /* margin: 0; */
    margin-top: 20px;
  }

  .delivery-option {
    text-align: center;
    -webkit-font-smoothing: antialiased;
    background-color: #fff;
    border: 1px solid #392f2c;
    border-radius: 50px;
    color: #000;
    cursor: pointer;
    display: block;
    /* font-family: Graphik, Helvetica Neue, Helvetica, Arial, sans-serif; */
    /* font-size: 1.083rem; */
    /* font-size: 16px; */
    /* font-weight: 400; */
    height: 40px;
    letter-spacing: .2px;
    letter-spacing: .05px;
    /* line-height: 1.85em; */
    /* line-height: 16px; */
    margin-bottom: 8px;
    padding: 0 16px;
    text-transform: none;
    align-content: center;
  }

  .delivery-option:hover {
    background-color: #392f2c;
    color: #f9f8f4;
    /* background-color: #eee; Change background color on hover */
  }

  .delivery-option.active {
    background-color: #392f2c;
    color: #f9f8f4;
    /* background-color: #eee; Change background color on hover */
  }

  /* .pincode-modal {} */

  .modal-overlay {
    display: none;
    justify-content: center;
    align-items: center;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
  }

  .modal {
      background: white;
      border-radius: 8px;
      width: 90%;
      max-width: 400px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      position: relative;
      text-align: center;
  }

  .close-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
  }

  .logo {
      width: 100px;
      margin-bottom: 20px;
  }

  .modal-header h2 {
      font-size: 1.5em;
      margin-bottom: 10px;
  }

  .modal-body {
    color: black;
  }

  .modal-body p {
      margin-bottom: 20px;
      color: black;
  }

  .modal-body h2 {
      margin-bottom: 20px;
      color: black;
  }

  form {
      display: flex;
      flex-direction: column;
      align-items: center;
  }

  label {
      margin-bottom: 8px;
      font-size: 1em;
  }

  input[type="text"] {
      width: 100%;
      padding: 10px;
      margin-bottom: 20px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 1em;
  }

  .submit-btn {
    background-color: #0b5e42;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1em;
  }

  .submit-btn:hover {
      background-color: #7d7d7d;
  }

  @media (min-width: 768px) {
      .modal {
          width: 60%;
      }
  }

  @media (min-width: 1024px) {
      .modal {
          width: 40%;
      }
  }
{%- endstyle -%}

<svg xmlns="http://www.w3.org/2000/svg" class="hidden">
  <symbol id="icon-search" viewbox="0 0 18 19" fill="none">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M11.03 11.68A5.784 5.784 0 112.85 3.5a5.784 5.784 0 018.18 8.18zm.26 1.12a6.78 6.78 0 11.72-.7l5.4 5.4a.5.5 0 11-.71.7l-5.41-5.4z" fill="currentColor"/>
  </symbol>

  <symbol id="icon-reset" class="icon icon-close"  fill="none" viewBox="0 0 18 18" stroke="currentColor">
    <circle r="8.5" cy="9" cx="9" stroke-opacity="0.2"/>
    <path d="M6.82972 6.82915L1.17193 1.17097" stroke-linecap="round" stroke-linejoin="round" transform="translate(5 5)"/>
    <path d="M1.22896 6.88502L6.77288 1.11523" stroke-linecap="round" stroke-linejoin="round" transform="translate(5 5)"/>
  </symbol>

  <symbol id="icon-close" class="icon icon-close" fill="none" viewBox="0 0 18 17">
    <path d="M.865 15.978a.5.5 0 00.707.707l7.433-7.431 7.579 7.282a.501.501 0 00.846-.37.5.5 0 00-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 10-.707-.708L8.991 7.853 1.413.573a.5.5 0 10-.693.72l7.563 7.268-7.418 7.417z" fill="currentColor">
  </symbol>
</svg>

<{% if section.settings.sticky_header_type != 'none' %}sticky-header data-sticky-type="{{ section.settings.sticky_header_type }}"{% else %}div{% endif %} class="header-wrapper color-{{ section.settings.color_scheme }} gradient{% if section.settings.show_line_separator %} header-wrapper--border-bottom{% endif %}">
  <header class="pre-header header--{{ section.settings.logo_position }} header--mobile-{{ section.settings.mobile_logo_position }} page-width{% if section.settings.menu_type_desktop == 'drawer' %} drawer-menu{% endif %}{% if section.settings.menu != blank %} header--has-menu{% endif %}{% if has_app_block %} header--has-app{% endif %}{% if social_links %} header--has-social{% endif %}{% if shop.customer_accounts_enabled %} header--has-account{% endif %}{% if localization_forms %} header--has-localizations{% endif %}">
    {%- liquid
      if section.settings.menu != blank
        if section.settings.menu_type_desktop == 'dropdown'
          render 'header-dropdown-menu'
        elsif section.settings.menu_type_desktop != 'drawer'
          render 'header-mega-menu'
        endif
      endif
    %}

    <div class="header__icons">
      
      <div id="date-dropdown-container" class="date-dropdown-container">
        <p class="date-desc">Shopping for 
          <span class="selected-date" id="selectedDate">
            <span id="deliveryDateText"></span>
            <span id="tooltiptext" class="tooltiptext"></span>
          </span>
          In 
          <span class="selected-date" id="selectedPincode">Pincode</span>
        </p>
        
      </div>

      {%- if shop.customer_accounts_enabled -%}
        {%- if customer -%}
          {% render 'icon-account' %}
          <a href="{{ routes.account_url }}" class="header__icon header__icon--account link focus-inset{% if section.settings.menu != blank %} small-hide{% endif %}">
            <span class="visually-hidden">
              {%- liquid
                if customer
                  echo 'customer.account_fallback' | t
                else
                  echo 'customer.log_in' | t
                endif
              -%}
            </span>
          </a>
        {%- else -%}
          <div class="login-section">
            {% render 'icon-account' %}
            <a href="{{ routes.account_login_url }}" class="header__icon header__icon--account link focus-inset{% if section.settings.menu != blank %} small-hide{% endif %}">
              Login
              <span class="visually-hidden">
                {%- liquid
                  if customer
                    echo 'customer.account_fallback' | t
                  else
                    echo 'customer.log_in' | t
                  endif
                -%}
              </span>
            </a>
            <a href="{{ routes.account_register_url }}" class="header__icon header__icon--account link focus-inset{% if section.settings.menu != blank %} small-hide{% endif %}">
              Join
              <span class="visually-hidden">
                {%- liquid
                  if customer
                    echo 'customer.account_fallback' | t
                  else
                    echo 'customer.log_in' | t
                  endif
                -%}
              </span>
            </a>
          <div>
        {%- endif -%}
      {%- endif -%}
    </div>
  </header>

  <div class="modal-overlay" id="modal-overlay">
        <div class="modal">
            <button class="close-btn" id="close-btn">&times;</button>
            <div class="modal-content">
                <div class="modal-header">
                  <div class="header__heading-logo-wrapper">
                    {%- assign logo_alt = settings.logo.alt | default: shop.name | escape -%}
                    {%- assign logo_height = settings.logo_width | divided_by: settings.logo.aspect_ratio -%}
                    {% capture sizes %}(max-width: {{ settings.logo_width | times: 2 }}px) 50vw, {{ settings.logo_width }}px{% endcapture %}
                    {% capture widths %}{{ settings.logo_width }}, {{ settings.logo_width | times: 1.5 | round }}, {{ settings.logo_width | times: 2 }}{% endcapture %}
                    {{ settings.logo | image_url: width: 600 | image_tag:
                      class: 'header__heading-logo motion-reduce',
                      widths: widths,
                      height: logo_height,
                      width: settings.logo_width,
                      alt: logo_alt,
                      sizes: sizes,
                      preload: true
                    }}
                  </div>
                </div>
                <div class="modal-body">
                    <div id="content-wrapper">
                      <h2>Enter a new zip code for your delivery</h2>
                      {% comment %} <p>You are currently shopping for <strong>90039</strong></p> {% endcomment %}
                      <form id="pincodeForm">
                          <label for="zip-code">Zip Code</label>
                          <input type="text" id="zip-code" name="zip-code" placeholder="Zip Code">
                          <button type="submit" class="submit-btn">Continue</button>
                      </form>
                    </div>
                    <div id="error-message" class="hidden">
                      <h2>We're sorry, but delivery to this pin code is currently unavailable.</h2>
                      <p>We're constantly expanding our delivery areas. Please check back soon or enter a different zip code.</p>
                      <button id="close-btn-pincode" class="submit-btn">Try Another Pincode</button>
                    </div>
                </div>
            </div>
        </div>
  </div>
</{% if section.settings.sticky_header_type != 'none' %}sticky-header{% else %}div{% endif %}>

{%- liquid
  for block in section.blocks
    if block.type == '@app'
      assign has_app_block = true
    endif
  endfor
-%}

{% javascript %}
  class StickyPreHeader extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.header = document.querySelector('.section-pre-header');
      this.headerIsAlwaysSticky = this.getAttribute('data-sticky-type') === 'always' || this.getAttribute('data-sticky-type') === 'reduce-logo-size';
      this.headerBounds = {};

      this.setHeaderHeight();

      window.matchMedia('(max-width: 990px)').addEventListener('change', this.setHeaderHeight.bind(this));

      if (this.headerIsAlwaysSticky) {
        this.header.classList.add('shopify-section-header-sticky');
      };

      this.currentScrollTop = 0;
      this.preventReveal = false;
      this.predictiveSearch = this.querySelector('predictive-search');

      this.onScrollHandler = this.onScroll.bind(this);
      this.hideHeaderOnScrollUp = () => this.preventReveal = true;

      this.addEventListener('preventHeaderReveal', this.hideHeaderOnScrollUp);
      window.addEventListener('scroll', this.onScrollHandler, false);

      this.createObserver();
    }

    setHeaderHeight() {
      document.documentElement.style.setProperty('--header-height', `${this.header.offsetHeight}px`);
    }

    disconnectedCallback() {
      this.removeEventListener('preventHeaderReveal', this.hideHeaderOnScrollUp);
      window.removeEventListener('scroll', this.onScrollHandler);
    }

    createObserver() {
      let observer = new IntersectionObserver((entries, observer) => {
        this.headerBounds = entries[0].intersectionRect;
        observer.disconnect();
      });

      observer.observe(this.header);
    }

    onScroll() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

      if (this.predictiveSearch && this.predictiveSearch.isOpen) return;

      if (scrollTop > this.currentScrollTop && scrollTop > this.headerBounds.bottom) {
        this.header.classList.add('scrolled-past-header');
        if (this.preventHide) return;
        requestAnimationFrame(this.hide.bind(this));
      } else if (scrollTop < this.currentScrollTop && scrollTop > this.headerBounds.bottom) {
        this.header.classList.add('scrolled-past-header');
        if (!this.preventReveal) {
          requestAnimationFrame(this.reveal.bind(this));
        } else {
          window.clearTimeout(this.isScrolling);

          this.isScrolling = setTimeout(() => {
            this.preventReveal = false;
          }, 66);

          requestAnimationFrame(this.hide.bind(this));
        }
      } else if (scrollTop <= this.headerBounds.top) {
        this.header.classList.remove('scrolled-past-header');
        requestAnimationFrame(this.reset.bind(this));
      }

      this.currentScrollTop = scrollTop;
    }

    hide() {
      if (this.headerIsAlwaysSticky) return;
      this.header.classList.add('shopify-section-header-hidden', 'shopify-section-header-sticky');
      this.closeMenuDisclosure();
      this.closeSearchModal();
    }

    reveal() {
      if (this.headerIsAlwaysSticky) return;
      this.header.classList.add('shopify-section-header-sticky', 'animate');
      this.header.classList.remove('shopify-section-header-hidden');
    }

    reset() {
      if (this.headerIsAlwaysSticky) return;
      this.header.classList.remove('shopify-section-header-hidden', 'shopify-section-header-sticky', 'animate');
    }

    closeMenuDisclosure() {
      this.disclosures = this.disclosures || this.header.querySelectorAll('header-menu');
      this.disclosures.forEach(disclosure => disclosure.close());
    }

    closeSearchModal() {
      this.searchModal = this.searchModal || this.header.querySelector('details-modal');
      this.searchModal.close(false);
    }
  }

  customElements.define('sticky-pre-header', StickyPreHeader);

  document.addEventListener('DOMContentLoaded', function() {
    const selectedDateEl = document.getElementById("selectedDate");
    const tooltipEl = document.getElementById("tooltiptext")

    const today = new Date(); // Get today's date

    // Create new Date objects for tomorrow, day after tomorrow, and 2 days after tomorrow
    const tomorrow = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);
    const dayAfterTomorrow = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 2);
    const twoDaysAfterTomorrow = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 3);


    // Function to format the date in a specific format
    const formatDate = (date) => {
      const options = { month: 'short', day: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    };

    // Formatted dates 
    const tomorrowFormatted = formatDate(tomorrow);
    const dayAfterTomorrowFormatted = formatDate(dayAfterTomorrow);
    const twoDaysAfterTomorrowFormatted = formatDate(twoDaysAfterTomorrow);

    // Array containing weekdays
    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

    // Get weekdays for each date
    const tomorrowWeekday = weekdays[tomorrow.getDay()];
    const dayAfterTomorrowWeekday = weekdays[dayAfterTomorrow.getDay()];
    const twoDaysAfterTomorrowWeekday = weekdays[twoDaysAfterTomorrow.getDay()];

    const tooltipHTML = `
          <div class="delivery-container">
            <span class="delivery-label">Select a delivery day</span>
            <ul class="delivery-options">
              <li class="delivery-option" data-delivery-date="${tomorrow}"">Tomorrow (${tomorrowFormatted})</li>
              <li class="delivery-option" data-delivery-date="${dayAfterTomorrow}">${dayAfterTomorrowWeekday} (${dayAfterTomorrowFormatted})</li>
              <li class="delivery-option" data-delivery-date="${twoDaysAfterTomorrow}">${twoDaysAfterTomorrowWeekday} (${twoDaysAfterTomorrowFormatted})</li>
            </ul>
          </div>
    `;

    const tempContainer = document.createElement("div");

    // Set the innerHTML of the tempContainer (parsing potential escaping issues)
    tempContainer.innerHTML = tooltipHTML;

    // Extract the desired content from the tempContainer (optional)
    const deliveryContainer = tempContainer.querySelector(".delivery-container");

    // Check if desired content is found
    if (deliveryContainer) {
        // Set the tooltip content using the extracted element (optional)
        tooltipEl.appendChild(deliveryContainer); // Or set tooltipEl.innerHTML directly
    } else {
        console.error("Delivery container not found in tooltip HTML.");
    }

    
     // Check for existing selection from localStorage
    const storedDeliveryDate = localStorage.getItem('delivery-date');
    if (storedDeliveryDate && storedDeliveryDate < new Date().toISOString()) {
        const deliveryOptions = tooltipEl.querySelectorAll('.delivery-option');
        // console.log(deliveryOptions);
        deliveryOptions.forEach(option => {
          // console.log(option.dataset.deliveryDate, storedDeliveryDate, option.dataset.deliveryDate === storedDeliveryDate);
          if (option.dataset.deliveryDate === storedDeliveryDate) {
            setSelected(option, storedDeliveryDate);
          }
        });
    } else {
        // If no selection is found, set the first option as selected
        const firstOption = tooltipEl.querySelector('.delivery-option');
        if (firstOption) {
          localStorage.setItem('delivery-date', firstOption.dataset.deliveryDate);
          setSelected(firstOption, firstOption.dataset.deliveryDate);
        }
    }

      // Attach click event listener to the tooltip element
    const deliveryOptions = tooltipEl.querySelectorAll('.delivery-option').forEach(option => {
        option.addEventListener('click', handleDeliveryClick.bind(this));
    });

    selectedDateEl.addEventListener("click", function() {
      tooltipEl.classList.toggle("show");

      // Position the tooltip below the selectedDateEl
      const tooltipRect = tooltipEl.getBoundingClientRect();
      const selectedDateRect = selectedDateEl.getBoundingClientRect();
      tooltipEl.style.top = `${selectedDateRect.bottom + 5}px`; // Add a 5px offset for spacing
      tooltipEl.style.left = `${selectedDateRect.left}px`;
    });

    document.addEventListener("click", function(event) {
      // Check if the clicked element is not the selectedDateEl or a descendant of tooltipEl
      if (!selectedDateEl.contains(event.target) && event.target !== tooltipEl) {
        // Hide the tooltip
        tooltipEl.classList.remove("show");
      }
    })

    function setSelected(element, selectedDate) {
      tooltipEl.querySelectorAll('.delivery-option').forEach(option => {
        option.classList.remove('selected');
      });
      element.classList.add('selected');
      const deliveryDateText = document.getElementById("deliveryDateText");

      // console.log(selectedDate , new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1))
      if (selectedDate == new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1)) {
        deliveryDateText.innerHTML = "Tomorrow";
      } else {
        deliveryDateText.innerHTML = new Date(element.dataset.deliveryDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
      }
    }

    function handleDeliveryClick(event) {
      event.stopPropagation();
      const clickedElement = event.target;
      if (clickedElement.classList.contains('delivery-option')) {
        // console.log(clickedElement.dataset, clickedElement);
        const selectedDeliveryDate = clickedElement.dataset.deliveryDate;
        localStorage.setItem('delivery-date', selectedDeliveryDate);

        setSelected(clickedElement, selectedDeliveryDate);
      }
    }
  });

  
  document.addEventListener('DOMContentLoaded', () => {
    const selectedPincodeEl = document.getElementById("selectedPincode");

    selectedPincodeEl.addEventListener("click", function() {
      document.getElementById('modal-overlay').style.display = 'flex';
    });

    document.getElementById('close-btn').addEventListener('click', function() {
        document.getElementById('modal-overlay').style.display = 'none';
    });
    const form = document.getElementById('pincodeForm');
    const zipCodeInput = document.getElementById('zip-code');
    const modalContent = document.getElementById('content-wrapper');
    const errorMessage = document.getElementById('error-message');
    const errorMessageCloseBtn = document.getElementById('close-btn-pincode');
    const submitButton = document.getElementById('submit-btn');
    const storedDeliveryDate = localStorage.getItem('delivery-pincode');
  
    selectedPincodeEl.innerHTML = storedDeliveryDate || 'Pincode'

    form.addEventListener('submit', async (event) => {
      event.preventDefault(); // Prevent the default form submission

      const zipCode = zipCodeInput.value;

      try {
        var data = {
                      pincode: zipCode,
                      // email: "johndoe@example.com"
                    };

                    $.ajax({
                      type: "POST",
                      url: "https://6109-2401-4900-1c75-5403-d95f-d3a4-edb8-f751.ngrok-free.app/api/pincode", // Replace with your actual endpoint URL
                      data: JSON.stringify({ pincode: zipCode }), // Stringify the data object
                      contentType: 'application/json', // Set the Content-Type header
                      dataType: 'json', // Expected response format (optional)
                      success: function(response) {

                        // Handle successful response
                        console.log("Success:", response);
                        // Update UI or perform actions based on the response
                        if (response.available) {
                          // Save delivery pincode to local storage on success
                          localStorage.setItem('delivery-pincode', zipCode);
                          document.getElementById('modal-overlay').style.display = 'none';
                          selectedPincodeEl.innerHTML = zipCode;
                          pincodeSelector.innerHTML = zipCode;
                        } else {
                          errorMessage.classList.remove('hidden');
                          modalContent.classList.add('hidden');
                          selectedPincodeEl.innerHTML = 'Pincode'
                          pincodeSelector.innerHTML = 'Select Pincode'
                          localStorage.removeItem('delivery-pincode');
                          // Update modal content to indicate delivery unavailability
                          // const modalContent = document.querySelector('.modal-content');
                          // modalContent.innerHTML = `<h2>We don't currently deliver to ${zipCode}, but we're expanding soon!</h2>`;
                        }

                      },
                      error: function(jqXHR, textStatus, errorThrown) {
                        // Handle errors
                        // console.error("Error:", textStatus, errorThrown);
                        errorMessage.classList.remove('hidden');
                        // Display error message or handle appropriately
                      }
                    })
      } catch (error) {
        console.error('There was a problem with the fetch operation:', error);
        // Handle errors appropriately, e.g., display an error message to the user
      }
    });

    errorMessageCloseBtn.addEventListener('click', function() {
      errorMessage.classList.add('hidden');
      modalContent.classList.remove('hidden');
    });
  });

{% endjavascript %}


{% schema %}
{
  "name": "t:sections.pre-header.name",
  "class": "section-pre-header",
  "max_blocks": 3,
  "settings": [
    {
      "type": "select",
      "id": "logo_position",
      "options": [
        {
          "value": "top-left",
          "label": "t:sections.header.settings.logo_position.options__2.label"
        },
        {
          "value": "top-center",
          "label": "t:sections.header.settings.logo_position.options__3.label"
        },
        {
          "value": "middle-left",
          "label": "t:sections.header.settings.logo_position.options__1.label"
        },
        {
          "value": "middle-center",
          "label": "t:sections.header.settings.logo_position.options__4.label"
        }
      ],
      "default": "middle-left",
      "label": "t:sections.header.settings.logo_position.label",
      "info": "t:sections.header.settings.logo_help.content"
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "t:sections.header.settings.menu.label"
    },
    {
      "type": "select",
      "id": "sticky_header_type",
      "options": [
        {
          "value": "none",
          "label": "t:sections.header.settings.sticky_header_type.options__1.label"
        },
        {
          "value": "on-scroll-up",
          "label": "t:sections.header.settings.sticky_header_type.options__2.label"
        },
        {
          "value": "always",
          "label": "t:sections.header.settings.sticky_header_type.options__3.label"
        },
        {
          "value": "reduce-logo-size",
          "label": "t:sections.header.settings.sticky_header_type.options__4.label"
        }
      ],
      "default": "on-scroll-up",
      "label": "t:sections.header.settings.sticky_header_type.label"
    },
    {
      "type": "checkbox",
      "id": "show_line_separator",
      "default": true,
      "label": "t:sections.header.settings.show_line_separator.label"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header__1.content"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
      {
      "type": "color_scheme",
      "id": "menu_color_scheme",
      "label": "t:sections.header.settings.menu_color_scheme.label",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header__3.content",
      "info": "t:sections.header.settings.header__4.info"
    },
    {
      "type": "checkbox",
      "id": "enable_country_selector",
      "default": false,
      "label": "t:sections.header.settings.enable_country_selector.label"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header__5.content",
      "info": "t:sections.header.settings.header__6.info"
    },
    {
      "type": "checkbox",
      "id": "enable_language_selector",
      "default": false,
      "label": "t:sections.header.settings.enable_language_selector.label"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.mobile_layout.content"
    },
    {
      "type": "select",
      "id": "mobile_logo_position",
      "options": [
        {
          "value": "center",
          "label": "t:sections.header.settings.mobile_logo_position.options__1.label"
        },
        {
          "value": "left",
          "label": "t:sections.header.settings.mobile_logo_position.options__2.label"
        }
      ],
      "default": "center",
      "label": "t:sections.header.settings.mobile_logo_position.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.spacing"
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.header.settings.margin_bottom.label",
      "default": 0
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 36,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 20
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 36,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 20
    }
  ],
  "blocks": [
    {
      "type": "@app"
    }
  ]
}
{% endschema %}
